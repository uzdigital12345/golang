// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Contact struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Age                  string   `protobuf:"bytes,2,opt,name=Age,proto3" json:"Age,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Gender               string   `protobuf:"bytes,4,opt,name=Gender,proto3" json:"Gender,omitempty"`
	Number               string   `protobuf:"bytes,5,opt,name=Number,proto3" json:"Number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contact) Reset()         { *m = Contact{} }
func (m *Contact) String() string { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()    {}
func (*Contact) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Contact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contact.Unmarshal(m, b)
}
func (m *Contact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contact.Marshal(b, m, deterministic)
}
func (m *Contact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contact.Merge(m, src)
}
func (m *Contact) XXX_Size() int {
	return xxx_messageInfo_Contact.Size(m)
}
func (m *Contact) XXX_DiscardUnknown() {
	xxx_messageInfo_Contact.DiscardUnknown(m)
}

var xxx_messageInfo_Contact proto.InternalMessageInfo

func (m *Contact) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Contact) GetAge() string {
	if m != nil {
		return m.Age
	}
	return ""
}

func (m *Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contact) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Contact) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type GetContacts struct {
	Contacts             []*Contact `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetContacts) Reset()         { *m = GetContacts{} }
func (m *GetContacts) String() string { return proto.CompactTextString(m) }
func (*GetContacts) ProtoMessage()    {}
func (*GetContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *GetContacts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetContacts.Unmarshal(m, b)
}
func (m *GetContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetContacts.Marshal(b, m, deterministic)
}
func (m *GetContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetContacts.Merge(m, src)
}
func (m *GetContacts) XXX_Size() int {
	return xxx_messageInfo_GetContacts.Size(m)
}
func (m *GetContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_GetContacts.DiscardUnknown(m)
}

var xxx_messageInfo_GetContacts proto.InternalMessageInfo

func (m *GetContacts) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func init() {
	proto.RegisterType((*Contact)(nil), "proto.Contact")
	proto.RegisterType((*GetContacts)(nil), "proto.GetContacts")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xd7, 0x76, 0xab, 0xfa, 0x86, 0x43, 0xde, 0x61, 0x86, 0x7a, 0x29, 0xbd, 0x58, 0x76,
	0xe8, 0x60, 0x82, 0xe0, 0xb1, 0xa8, 0x8c, 0x1e, 0xdc, 0xa1, 0xe0, 0x1f, 0x90, 0x36, 0x6f, 0x45,
	0x68, 0x9b, 0x92, 0x65, 0x82, 0xff, 0xa6, 0x7f, 0x91, 0x34, 0x89, 0x22, 0x3b, 0xed, 0x94, 0xef,
	0xfb, 0xe5, 0x7b, 0x24, 0xef, 0x83, 0xeb, 0x03, 0xa9, 0xcf, 0x8f, 0x9a, 0xb2, 0x41, 0x49, 0x2d,
	0x71, 0x66, 0x8e, 0xe8, 0xae, 0x91, 0xb2, 0x69, 0x69, 0x6d, 0x5c, 0x75, 0xdc, 0xaf, 0xa9, 0x1b,
	0xf4, 0x97, 0xcd, 0x24, 0x12, 0x2e, 0x9e, 0x65, 0xaf, 0x79, 0xad, 0x71, 0x01, 0x7e, 0x21, 0x98,
	0x17, 0x7b, 0x69, 0x50, 0xfa, 0x85, 0xc0, 0x1b, 0x08, 0xf2, 0x86, 0x98, 0x1f, 0x7b, 0xe9, 0x55,
	0x39, 0x4a, 0x44, 0x98, 0xee, 0x78, 0x47, 0x2c, 0x30, 0xc8, 0x68, 0x5c, 0x42, 0xb8, 0xa5, 0x5e,
	0x90, 0x62, 0x53, 0x43, 0x9d, 0x1b, 0xf9, 0xee, 0xd8, 0x55, 0xa4, 0xd8, 0xcc, 0x72, 0xeb, 0x92,
	0x27, 0x98, 0x6f, 0x49, 0xbb, 0x37, 0x0f, 0xb8, 0x82, 0xcb, 0xda, 0x69, 0xe6, 0xc5, 0x41, 0x3a,
	0xdf, 0x2c, 0xec, 0xcf, 0x32, 0x17, 0x29, 0xff, 0xee, 0x37, 0xdf, 0x1e, 0xdc, 0x3a, 0xfa, 0xc6,
	0x7b, 0xde, 0x90, 0x2a, 0x7a, 0x4d, 0x6a, 0xcf, 0x6b, 0xc2, 0x7b, 0x08, 0x72, 0x21, 0xf0, 0x64,
	0x38, 0x3a, 0xf1, 0xc9, 0x04, 0x57, 0x10, 0xbe, 0x0f, 0x82, 0x6b, 0x3a, 0x2f, 0xfb, 0x42, 0x2d,
	0x9d, 0x95, 0x7d, 0x1c, 0x7b, 0xd0, 0x79, 0xdb, 0xe2, 0x32, 0xb3, 0x85, 0x67, 0xbf, 0x85, 0x67,
	0xaf, 0x63, 0xe1, 0x11, 0xba, 0x99, 0x7f, 0xeb, 0x27, 0x93, 0x2a, 0x34, 0xf0, 0xe1, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x93, 0xd6, 0x6c, 0xaf, 0xbc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContactManagerInterfaceClient is the client API for ContactManagerInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactManagerInterfaceClient interface {
	Add(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	Update(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	Delete(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetContacts, error)
}

type contactManagerInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewContactManagerInterfaceClient(cc *grpc.ClientConn) ContactManagerInterfaceClient {
	return &contactManagerInterfaceClient{cc}
}

func (c *contactManagerInterfaceClient) Add(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/proto.ContactManagerInterface/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerInterfaceClient) Update(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/proto.ContactManagerInterface/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerInterfaceClient) Delete(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/proto.ContactManagerInterface/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerInterfaceClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetContacts, error) {
	out := new(GetContacts)
	err := c.cc.Invoke(ctx, "/proto.ContactManagerInterface/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactManagerInterfaceServer is the server API for ContactManagerInterface service.
type ContactManagerInterfaceServer interface {
	Add(context.Context, *Contact) (*Contact, error)
	Update(context.Context, *Contact) (*Contact, error)
	Delete(context.Context, *Contact) (*Contact, error)
	GetAll(context.Context, *empty.Empty) (*GetContacts, error)
}

// UnimplementedContactManagerInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedContactManagerInterfaceServer struct {
}

func (*UnimplementedContactManagerInterfaceServer) Add(ctx context.Context, req *Contact) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedContactManagerInterfaceServer) Update(ctx context.Context, req *Contact) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedContactManagerInterfaceServer) Delete(ctx context.Context, req *Contact) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedContactManagerInterfaceServer) GetAll(ctx context.Context, req *empty.Empty) (*GetContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}

func RegisterContactManagerInterfaceServer(s *grpc.Server, srv ContactManagerInterfaceServer) {
	s.RegisterService(&_ContactManagerInterface_serviceDesc, srv)
}

func _ContactManagerInterface_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerInterfaceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContactManagerInterface/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerInterfaceServer).Add(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManagerInterface_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerInterfaceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContactManagerInterface/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerInterfaceServer).Update(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManagerInterface_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerInterfaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContactManagerInterface/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerInterfaceServer).Delete(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManagerInterface_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerInterfaceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContactManagerInterface/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerInterfaceServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactManagerInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContactManagerInterface",
	HandlerType: (*ContactManagerInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ContactManagerInterface_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ContactManagerInterface_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContactManagerInterface_Delete_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ContactManagerInterface_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
